<statement> ::= <compound_statement> ;
<statement> ::= <simple_statement> ;
<declaration_statement> ::= <declaration> ;
<simple_statement> ::= <declaration_statement> ;
<simple_statement> ::= <expression_statement> ;
<simple_statement> ::= <selection_statement> ;
<simple_statement> ::= <switch_statement> ;
<simple_statement> ::= <case_label> ;
<simple_statement> ::= <iteration_statement> ;
<simple_statement> ::= <jump_statement> ;
<compound_statement> ::= "{" "}" ;
<compound_statement> ::= "{" <statement_list> "}" ;
<statement_no_new_scope> ::= <compound_statement_no_new_scope> ;
<statement_no_new_scope> ::= <simple_statement> ;
<compound_statement_no_new_scope> ::= "{" "}" ;
<compound_statement_no_new_scope> ::= "{" <statement_list> "}" ;
<statement_list> ::= <statement> ;
<statement_list> ::= <statement_list> <statement> ;
<expression_statement> ::= ";" ;
<expression_statement> ::= <expression> ";" ;
<selection_statement> ::= "if" "(" <expression> ")" <selection_rest_statement> ;
<selection_rest_statement> ::= <statement> "else" <statement> ;
<selection_rest_statement> ::= <statement> ;
<condition> ::= <expression> ;
<condition> ::= <fully_specified_type> identifier "=" <initializer> ;
<switch_statement> ::= "switch" "(" <expression> ")" "{" <switch_statement_list> "}" ;
<switch_statement_list> ::= <statement_list> ;
<case_label> ::= "case" <expression> ":" ;
<case_label> ::= "default" ":" ;
<iteration_statement> ::= "while" "(" <condition> ")" <statement_no_new_scope> ;
<iteration_statement> ::= "do" <statement> "while" "(" <expression> ")" ";" ;
<iteration_statement> ::= "for" "(" <for_init_statement> <for_rest_statement> ")" <statement_no_new_scope> ;
<for_init_statement> ::= <expression_statement> ;
<for_init_statement> ::= <declaration_statement> ;
<conditionopt> ::= <condition> ;
<for_rest_statement> ::= <conditionopt> ";" ;
<for_rest_statement> ::= <conditionopt> ";" <expression> ;
<jump_statement> ::= "continue" ";" ;
<jump_statement> ::= "break" ";" ;
<jump_statement> ::= "return" ";" ;
<jump_statement> ::= "return" <expression> ";" ;
<jump_statement> ::= "discard" ";" ;


<expression> ::= "expression" ;
<fully_specified_type> ::= "fully_specified_type" ;
<initializer> ::= "initializer" ;
<declaration> ::= "declaration" ;
