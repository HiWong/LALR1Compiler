Edge [1]:
State[2] ==[<Production>]==> State[4]
<Grammar> ::= <ProductionList> . <Production> ;
<Vn> ::= . "<" identifier ">" ;
<ProductionList> ::= <ProductionList> . <Production> ;
<Production> ::= . <Vn> "::=" <Canditate> <RightPartList> ";" ;
    └──(<Production>)──┒
<ProductionList> ::= <ProductionList> <Production> . ;
<Grammar> ::= <ProductionList> <Production> . ;
Edge [2]:
State[11] ==["userDefinedType"]==> State[20]
<Vn> ::= . "<" identifier ">" ;
<Vt> ::= . constString ;
<VList> ::= <VList> . <V> ;
<Vt> ::= . "number" ;
<V> ::= . <Vt> ;
<V> ::= . <Vn> ;
<Canditate> ::= <VList> . <V> ;
<Vt> ::= . "identifier" ;
<Vt> ::= . "userDefinedType" ;
<Vt> ::= . "constString" ;
<Vt> ::= . "null" ;
    └──("userDefinedType")──┒
<Vt> ::= "userDefinedType" . ;
Edge [3]:
State[6] ==["::="]==> State[8]
<Production> ::= <Vn> . "::=" <Canditate> <RightPartList> ";" ;
    └──("::=")──┒
<Production> ::= <Vn> "::=" . <Canditate> <RightPartList> ";" ;
<Canditate> ::= . <VList> <V> ;
<VList> ::= . <VList> <V> ;
<VList> ::= . ;
Edge [4]:
State[11] ==["identifier"]==> State[19]
<Vn> ::= . "<" identifier ">" ;
<Vt> ::= . constString ;
<VList> ::= <VList> . <V> ;
<Vt> ::= . "number" ;
<V> ::= . <Vt> ;
<V> ::= . <Vn> ;
<Canditate> ::= <VList> . <V> ;
<Vt> ::= . "identifier" ;
<Vt> ::= . "userDefinedType" ;
<Vt> ::= . "constString" ;
<Vt> ::= . "null" ;
    └──("identifier")──┒
<Vt> ::= "identifier" . ;
Edge [5]:
State[11] ==[<V>]==> State[15]
<Vn> ::= . "<" identifier ">" ;
<Vt> ::= . constString ;
<VList> ::= <VList> . <V> ;
<Vt> ::= . "number" ;
<V> ::= . <Vt> ;
<V> ::= . <Vn> ;
<Canditate> ::= <VList> . <V> ;
<Vt> ::= . "identifier" ;
<Vt> ::= . "userDefinedType" ;
<Vt> ::= . "constString" ;
<Vt> ::= . "null" ;
    └──(<V>)──┒
<Canditate> ::= <VList> <V> . ;
<VList> ::= <VList> <V> . ;
Edge [6]:
State[1] ==[<Grammar>]==> State[3]
<Grammar> ::= . <ProductionList> <Production> ;
<ProductionList> ::= . ;
<S'> ::= . <Grammar> "$" ;
<ProductionList> ::= . <ProductionList> <Production> ;
    └──(<Grammar>)──┒
<S'> ::= <Grammar> . "$" ;
Edge [7]:
State[23] ==[<RightPartList>]==> State[25]
<RightPartList> ::= . ;
<RightPartList> ::= . "|" <Canditate> <RightPartList> ;
<RightPartList> ::= "|" <Canditate> . <RightPartList> ;
    └──(<RightPartList>)──┒
<RightPartList> ::= "|" <Canditate> <RightPartList> . ;
Edge [8]:
State[8] ==[<VList>]==> State[11]
<Production> ::= <Vn> "::=" . <Canditate> <RightPartList> ";" ;
<Canditate> ::= . <VList> <V> ;
<VList> ::= . <VList> <V> ;
<VList> ::= . ;
    └──(<VList>)──┒
<Vn> ::= . "<" identifier ">" ;
<Vt> ::= . constString ;
<VList> ::= <VList> . <V> ;
<Vt> ::= . "number" ;
<V> ::= . <Vt> ;
<V> ::= . <Vn> ;
<Canditate> ::= <VList> . <V> ;
<Vt> ::= . "identifier" ;
<Vt> ::= . "userDefinedType" ;
<Vt> ::= . "constString" ;
<Vt> ::= . "null" ;
Edge [9]:
State[11] ==[<Vn>]==> State[18]
<Vn> ::= . "<" identifier ">" ;
<Vt> ::= . constString ;
<VList> ::= <VList> . <V> ;
<Vt> ::= . "number" ;
<V> ::= . <Vt> ;
<V> ::= . <Vn> ;
<Canditate> ::= <VList> . <V> ;
<Vt> ::= . "identifier" ;
<Vt> ::= . "userDefinedType" ;
<Vt> ::= . "constString" ;
<Vt> ::= . "null" ;
    └──(<Vn>)──┒
<V> ::= <Vn> . ;
Edge [10]:
State[10] ==["|"]==> State[12]
<RightPartList> ::= . ;
<RightPartList> ::= . "|" <Canditate> <RightPartList> ;
<Production> ::= <Vn> "::=" <Canditate> . <RightPartList> ";" ;
    └──("|")──┒
<Canditate> ::= . <VList> <V> ;
<RightPartList> ::= "|" . <Canditate> <RightPartList> ;
<VList> ::= . <VList> <V> ;
<VList> ::= . ;
Edge [11]:
State[7] ==[">"]==> State[9]
<Vn> ::= "<" identifier . ">" ;
    └──(">")──┒
<Vn> ::= "<" identifier ">" . ;
Edge [12]:
State[11] ==["number"]==> State[16]
<Vn> ::= . "<" identifier ">" ;
<Vt> ::= . constString ;
<VList> ::= <VList> . <V> ;
<Vt> ::= . "number" ;
<V> ::= . <Vt> ;
<V> ::= . <Vn> ;
<Canditate> ::= <VList> . <V> ;
<Vt> ::= . "identifier" ;
<Vt> ::= . "userDefinedType" ;
<Vt> ::= . "constString" ;
<Vt> ::= . "null" ;
    └──("number")──┒
<Vt> ::= "number" . ;
Edge [13]:
State[13] ==[";"]==> State[24]
<Production> ::= <Vn> "::=" <Canditate> <RightPartList> . ";" ;
    └──(";")──┒
<Production> ::= <Vn> "::=" <Canditate> <RightPartList> ";" . ;
Edge [14]:
State[10] ==[<RightPartList>]==> State[13]
<RightPartList> ::= . ;
<RightPartList> ::= . "|" <Canditate> <RightPartList> ;
<Production> ::= <Vn> "::=" <Canditate> . <RightPartList> ";" ;
    └──(<RightPartList>)──┒
<Production> ::= <Vn> "::=" <Canditate> <RightPartList> . ";" ;
Edge [15]:
State[12] ==[<VList>]==> State[11]
<Canditate> ::= . <VList> <V> ;
<RightPartList> ::= "|" . <Canditate> <RightPartList> ;
<VList> ::= . <VList> <V> ;
<VList> ::= . ;
    └──(<VList>)──┒
<Vn> ::= . "<" identifier ">" ;
<Vt> ::= . constString ;
<VList> ::= <VList> . <V> ;
<Vt> ::= . "number" ;
<V> ::= . <Vt> ;
<V> ::= . <Vn> ;
<Canditate> ::= <VList> . <V> ;
<Vt> ::= . "identifier" ;
<Vt> ::= . "userDefinedType" ;
<Vt> ::= . "constString" ;
<Vt> ::= . "null" ;
Edge [16]:
State[2] ==[<Vn>]==> State[6]
<Grammar> ::= <ProductionList> . <Production> ;
<Vn> ::= . "<" identifier ">" ;
<ProductionList> ::= <ProductionList> . <Production> ;
<Production> ::= . <Vn> "::=" <Canditate> <RightPartList> ";" ;
    └──(<Vn>)──┒
<Production> ::= <Vn> . "::=" <Canditate> <RightPartList> ";" ;
Edge [17]:
State[11] ==[<Vt>]==> State[17]
<Vn> ::= . "<" identifier ">" ;
<Vt> ::= . constString ;
<VList> ::= <VList> . <V> ;
<Vt> ::= . "number" ;
<V> ::= . <Vt> ;
<V> ::= . <Vn> ;
<Canditate> ::= <VList> . <V> ;
<Vt> ::= . "identifier" ;
<Vt> ::= . "userDefinedType" ;
<Vt> ::= . "constString" ;
<Vt> ::= . "null" ;
    └──(<Vt>)──┒
<V> ::= <Vt> . ;
Edge [18]:
State[2] ==["<"]==> State[5]
<Grammar> ::= <ProductionList> . <Production> ;
<Vn> ::= . "<" identifier ">" ;
<ProductionList> ::= <ProductionList> . <Production> ;
<Production> ::= . <Vn> "::=" <Canditate> <RightPartList> ";" ;
    └──("<")──┒
<Vn> ::= "<" . identifier ">" ;
Edge [19]:
State[11] ==[constString]==> State[14]
<Vn> ::= . "<" identifier ">" ;
<Vt> ::= . constString ;
<VList> ::= <VList> . <V> ;
<Vt> ::= . "number" ;
<V> ::= . <Vt> ;
<V> ::= . <Vn> ;
<Canditate> ::= <VList> . <V> ;
<Vt> ::= . "identifier" ;
<Vt> ::= . "userDefinedType" ;
<Vt> ::= . "constString" ;
<Vt> ::= . "null" ;
    └──(constString)──┒
<Vt> ::= constString . ;
Edge [20]:
State[11] ==["<"]==> State[5]
<Vn> ::= . "<" identifier ">" ;
<Vt> ::= . constString ;
<VList> ::= <VList> . <V> ;
<Vt> ::= . "number" ;
<V> ::= . <Vt> ;
<V> ::= . <Vn> ;
<Canditate> ::= <VList> . <V> ;
<Vt> ::= . "identifier" ;
<Vt> ::= . "userDefinedType" ;
<Vt> ::= . "constString" ;
<Vt> ::= . "null" ;
    └──("<")──┒
<Vn> ::= "<" . identifier ">" ;
Edge [21]:
State[11] ==["null"]==> State[22]
<Vn> ::= . "<" identifier ">" ;
<Vt> ::= . constString ;
<VList> ::= <VList> . <V> ;
<Vt> ::= . "number" ;
<V> ::= . <Vt> ;
<V> ::= . <Vn> ;
<Canditate> ::= <VList> . <V> ;
<Vt> ::= . "identifier" ;
<Vt> ::= . "userDefinedType" ;
<Vt> ::= . "constString" ;
<Vt> ::= . "null" ;
    └──("null")──┒
<Vt> ::= "null" . ;
Edge [22]:
State[1] ==[<ProductionList>]==> State[2]
<Grammar> ::= . <ProductionList> <Production> ;
<ProductionList> ::= . ;
<S'> ::= . <Grammar> "$" ;
<ProductionList> ::= . <ProductionList> <Production> ;
    └──(<ProductionList>)──┒
<Grammar> ::= <ProductionList> . <Production> ;
<Vn> ::= . "<" identifier ">" ;
<ProductionList> ::= <ProductionList> . <Production> ;
<Production> ::= . <Vn> "::=" <Canditate> <RightPartList> ";" ;
Edge [23]:
State[5] ==[identifier]==> State[7]
<Vn> ::= "<" . identifier ">" ;
    └──(identifier)──┒
<Vn> ::= "<" identifier . ">" ;
Edge [24]:
State[23] ==["|"]==> State[12]
<RightPartList> ::= . ;
<RightPartList> ::= . "|" <Canditate> <RightPartList> ;
<RightPartList> ::= "|" <Canditate> . <RightPartList> ;
    └──("|")──┒
<Canditate> ::= . <VList> <V> ;
<RightPartList> ::= "|" . <Canditate> <RightPartList> ;
<VList> ::= . <VList> <V> ;
<VList> ::= . ;
Edge [25]:
State[11] ==["constString"]==> State[21]
<Vn> ::= . "<" identifier ">" ;
<Vt> ::= . constString ;
<VList> ::= <VList> . <V> ;
<Vt> ::= . "number" ;
<V> ::= . <Vt> ;
<V> ::= . <Vn> ;
<Canditate> ::= <VList> . <V> ;
<Vt> ::= . "identifier" ;
<Vt> ::= . "userDefinedType" ;
<Vt> ::= . "constString" ;
<Vt> ::= . "null" ;
    └──("constString")──┒
<Vt> ::= "constString" . ;
Edge [26]:
State[8] ==[<Canditate>]==> State[10]
<Production> ::= <Vn> "::=" . <Canditate> <RightPartList> ";" ;
<Canditate> ::= . <VList> <V> ;
<VList> ::= . <VList> <V> ;
<VList> ::= . ;
    └──(<Canditate>)──┒
<RightPartList> ::= . ;
<RightPartList> ::= . "|" <Canditate> <RightPartList> ;
<Production> ::= <Vn> "::=" <Canditate> . <RightPartList> ";" ;
Edge [27]:
State[12] ==[<Canditate>]==> State[23]
<Canditate> ::= . <VList> <V> ;
<RightPartList> ::= "|" . <Canditate> <RightPartList> ;
<VList> ::= . <VList> <V> ;
<VList> ::= . ;
    └──(<Canditate>)──┒
<RightPartList> ::= . ;
<RightPartList> ::= . "|" <Canditate> <RightPartList> ;
<RightPartList> ::= "|" <Canditate> . <RightPartList> ;